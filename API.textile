
------

API 0 - affero license compliance

* GET /api/affero/hash
** Returns the git source-control identifier of the commit that is running
** For example, "f572d396fae9206628714fb2ce00f72e94f2258f"
** baked into the war file at compile time

* GET /api/affero/source
** (valid redirect or direct-asset-fetch) ... maybe cached, but derived from locally-accessible git repo?
** "exception:${license_number}" - where ${license_number} is provided by (and purchased from) Allogy
** "non-compliant" & http-status=500 - admission that this instance is not setup to comply with the affero license

------

API 1 - qrauthd to web (i.e. generally-available sqrl login for shell access)

?: 1st... map username -> [ sqrl delegate servers ]

* GET /api/shell/nut/$HOSTNAME/json
** HOSTNAME -> where they are trying to get shell access to
** Generates a SQRL, RSA, or SHELL/CRAM consumable NUT *WITHOUT-DELAY*
** { blob:"OPAQUEBASE64ISHTOKEN", qr_url:"sqrl://*****", link_url:"sqrl://*****", poll_url:"https://*****" }

* POST /api/shell/session/$HOSTNAME
** RESPONSE -> "${NUT.blob}:${API_HASH}:${DIGEST}" where DIGEST=sha1(NUT.blob+SHELL_KEY), & API_HASH is pre-hashed tenant api key
** *Consumes* NUT (success or failure)
** Activates and returns a shell-level authentication ticket (for this tenant) on success
** { ticket:"OPAQUE-ASCII-TOKEN", expires:102394123094 }

* POST /api/shell/poll/$HOSTNAME/$NUT/json
** HOSTNAME -> where they are trying to get shell access to
** TICKET   -> a shell-level authentication ticket (from the above shell/session command)
** NB: NUT is *consumed* if polling succeeds (that is, if return is success and other than empty object)
** { shell:true, username:bob, uid:123, groups: { "wheel":321, "disk":987}} 
** {} <-- empty object means try again
** { shell:false, passed:true } <--- valid sqrl auth, no user account
** { shell:false, passed:true, uid:212 } <--- valid sqrl auth, user account w/o username

Client MUST still verify username
Client MUST emit a warning if uids do not match (but use system-level uid?)
Server MUST beware of too many outstanding sqrl requests or unreachable server (DoS & fail-safe)
MAYBE use more shell-friendly encoding than json (but groups list?)
CONSIDER if we support multiple sqrl servers, then don't we need separate tenant-secrets?
CONSIDER use of tenantperson::id as a uid (risk of overflow? tenant migration?)
CONSIDER pre-shell mitm effects such as SSH interception (can sqrl or protocol help? show host key pattern?)

* POST /api/shell/blessed/${USER}
** HOSTNAME -> where they are trying to get shell access to
** TICKET   -> a shell-level authentication ticket (from the above shell/session command)
** { shell:true, username:bob, uid:123, groups: { "wheel":321, "disk":987}} 
** { shell:false, uid: 1234 } - a valid user, of this tenant, but no shell access
** { shell:false } - never heard of 'em
** NB: this may be consulted before *or* after the user has passed other checks, and is the fallback for lack of git repo updating
** NB: if local data (e.g. from previous connections) indicate the user *does* have shell access, then in the face of a network failure or server error one must assume the user *DOES* have shell access
** NB: the status codes shall also be distinct for true (200) and false (202)
** NB: an invalid username will generate a 400 error response

??: should 'blessed' and 'poll' return list of active rsa pubkeys too?

* POST /api/shell/pubkeys/$HOSTNAME[/$USER]
** HOSTNAME -> where they are trying to get shell access to
** TICKET   -> a shell-level authentication ticket (from the above shell/session command)
** Returns stream of one or all public keys that have shell-level access to this host, can be used as a pull-replication from web.
** e.g."/user/bob/pubkey-123\nssh-rsa 1203498 bob@example.com\n"
** NB: this should never return a pubkey for 'root' (or any system user), if it does... don't trust *any* of the public keys returned.
** NB: the post condition of this call are broad and sweeping (basically re-writing the entire login authorization)
** This means that you must *REALLY-TRUST* the originating server, and the PKI that is security your link to it... THINK FIRST!

------

API 2 - web (or localhost) to qrauthd (i.e. internal synchronization of shell-level user accounts)

SOCKET-level protocol (not HTTP)

(1a) web presents self as authenticating as a particular person, all fields required
> ${HOSTNAME}
< web
< auth.domain.com
< ${HASHED_TENANT_API_KEY}
{{ INSERT SMP NEGOTIATION: where X=SERVER_SSL_FINGERPRINT+SHELL_KEY; web is alice, qrauthd is Bob }}
> OK

(1b) unix socket identity (kernel answers: "who's calling?")
> ${HOSTNAME}
< socket        < service calls getsockopt(..., SO_PEERCRED, ...) to identify the caller, omits per-request identity?
> OK

(1c) local process identifies via local filesystem (deprecated)
> ${HOSTNAME}
< fscram
< ${USER}
> ${CHALLENGE}  > A short blob of ascii text (no whitespace), that the user is to write to a /tmp file
< /tmp/${WHERE} < Where $USER wrote $CHALLENGE, and where you can read it (and verify both the contents and the owner of the file)
> OK            > $USER can now delete the file (qrauthd may not be able to)

...hereafter, the conversation takes the form:
< 149123409877                                          < the effective-time (commit-time) of the following request
< Bob Jones
< bjones@example.com
< method:1:totp:120394123498:120394123498:1024982349328 < (method  #1, type, modified, login, expire)
< ${REQUEST}
> ${RESPONSE}

NB: EVERY request, EVEN READ REQUESTS indicate who is doing the reading!!!!

[in general, both REQUEST and RESPONSE are one-line, as follows]

< exist:privy:/group/name[:key]
> FALSE

NB: when checking /user/* or /group/* (no trailing path), qrauthd must *also* check /etc/passwd and /etc/group (via SSSD)

< set:secret:/user/bob/props:key:value
> OK

< read:privy:/user/bob/otp-h-yubi-1.counter[:key]
> OK

?: Rather than OK, it is also permissable to write "FAIL:${message}"
?: should we allow reading from 'secret' repo? or just have web assume that it's db is correct (no updating from shell-side?)

< bye
> BYE   > server closes socket

------------

API 3 - qrauthd replication helper

UDP PROTOCOL

< "hashes"
> "${privy_hash}:${secret_hash}"   > NB: either (or both?) can be empty string (e.g. if there is an error, or no secret access)

------------

API 4 - tenant utilities

* POST /api/tenant/create
** PRIMARY={very-unique-ascii-string-or-guid}
** SECONDARY={another-very-unique-ascii-string-or-guid}
** return: currently an undefined textual response (201 indicates success)
** After this call, you may use PRIMARY as your API_KEY... or SECONDARY if PRIMARY is exposed or expired
** IMPORTANT!!! Keep your secondary key safe!

* POST /api/tenant/rekey
** API_KEY={your-current-secondary-api-key-which-now-becomes-primary}
** NEXT_KEY={very-unique-ascii-string-or-guid}
** status 202 indicates success
** After this call, which proves that you know your secondary key (which should not have been wrapped up in your deployment),
** the secondary key becomes your primary, and the provided NEXT_KEY becomes your SECONDARY... thus, "shifting" them.

(!) all following methods require posting API_KEY (unhashed)

* POST /api/tenant/user/recent
* POST /api/tenant/user/named/$NAME
* POST /api/tenant/user/id/$UIDS
** returns username,uid(tenantperson::id),tenant-fields
** expensive?: tenant-group memberships(name->id),group-derived permissions
** maybe: user's number of banned sites
** maximum number of UIDs?
** performance-oriented; async fetch of tenant (by api key) & listed tenant-person; filters out those whose tenant_id is not the provided one
** returns status of 404 if no match (200 if *any* match)

* POST /api/tenant/user/ban/$UIDS_CSV
* POST /api/tenant/user/unban/$UIDS_CSV
** MESSAGE - required
** Sets (or clears) the deadline and deathmessage, a banned user is effectively preventing the specified users from accessing the tenant's site
** Might (one day?) influence blacklisted ip address logic (if one ip is banned by many distinct tenants?)

* POST /api/tenant/user/banned
** Lists the users that have a deathMessage (or passed deadline)
** This *might* be the only way to see the users, as they will surly be hidden from other common lists.

* POST /api/tenant/user/set/id/$UID (bulk setting fields)
* POST /api/tenant/user/set/id/$UIDS/$key/$value (set single field; enforces nice keys and values)

* POST /api/tenant/group/named/$NAMES
* POST /api/tenant/group/id/$UIDS
** returns groupname,gid(tenantgroup::id),tenant-fields,uids in group
** returns status of 404 if no match (200 if *any* match)

* POST /api/tenant/group/set/id/$GID (bulk setting fields)
* POST /api/tenant/group/set/id/$GID/$key/$value (set single field; enforces nice keys and values)
** NB: setting name & description may transparently fail (or be tenant-specific) if you don't *own* the group name.

* POST /api/tenant/group/list
** lists group names, descriptions, permissions, GIDs, and if you 'own' it (or if then name is 'well-known')

* POST /api/tenant/group/create/$NAME (with name, description, and fields; optional members UID list?)
** returns; GID & if you currently 'own' it

* POST /api/tenant/group/permission/set/$GID/$key
* POST /api/tenant/group/permission/clear/$GID/$key
** sets (or clears) the given permission key for the specified group

* POST /api/tenant/group/member/$GID/$UID
* POST /api/tenant/group/nonmember/$GID/$UID

* POST /api/tenant/sync/all
** prompts the synchronizer to re-write all current permissions (useful in debugging or lapse in shell git sync service)

-------------------

API 5 - Standard Login & account maintenance

* POST /api/tenant/login
** API_KEY (unhashed)
** SESSION_ID (hashed)
** USER_IP
** CSS_REPLACE (url [can be relative, or even blank] that *REPLACES* default css file)
** TODO: ability to add extra panels for backwards compatibility?
** {uid:12345, unixName:bob, displayName:"Robert", alarm:false, security_rank:4, groups:{...}, permissions:[...]}
** returns either:
*** (1) the json login info (status 200),
*** (2) the html that would allow authentication (status 202), or
*** (3) if the session should be destroyed and retried (status 403)
** may be called often (e.g. every 2 minutes), but not at every request, to ensure the user is *still* logged in (for global logout feature)


(!!!) NB: there is no logout equivalent: "POST /api/tenant/logout"


* GET /api/tenant/delegate/logout?session_id=XXXXXXX
** As the result of any user-requested logout (as opposed to timeout), and yet
** *WITHOUT* invalidating the user's existing tenant-side session,
** the tenant may blindly *REDIRECT* the user here to "do the right thing" regarding the
** user's session preferences (local/global/maybe-global/confirm/auto/abort-and-return/timeout)
** NB: session_id (from the login command) must be provided and correct, but the user may not be presented with a warning or error if it is wrong or missing, or already invalidated
** A complete implementation must set a flag in the session to indicate that the session must be revalidated using /login
** This is important because the user might expect one logout command to effect all the websites, and 
** Unfortunately, the side effect of this is that the 'final-goodbye' screen cannot currently be tenant-branded



* GET /user/account
** Not really an API call (no auth needed?)
** This url can be provided as a link (e.g. to open in a new window) to provide easy account maintenance


* POST /api/tenant/user/account
** API_KEY (unhashed)
** CSS (url [must be absolute] that *REPLACES* default css file)
** This url will return an html blob which can be added to your page for account maintenance (an iframe)
** ...in much the same way that /api/tenant/login works

---------------------

API 6 - Internal coordination calls (these are used, but don't use these)

* POST /api/internal/attach
** SESSION_ID=(pre-hashed by the tenant's calling code)
** Detects if user is logged in or not, and (if so) attaches session authentication.
** '{online:false}'
** '{online:true, username:bob}'

* GET /api/noscript/unsafe/attach/$SESSION_ID/notice.png
** A variant of the 'attach' api call that works with browsers lacking javascript
** "unsafe" because GET directly effects attachment state, and "GETs should be SAFE"
** If not logged in, returns a 1x1 transparent PNG.
** If logged in, attaches session and returns a large-ish visual indication to reload the page (which should notice the attachment)

---------------------

