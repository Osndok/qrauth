<html t:type="layout" title="Add Credential"
      xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd"
      xmlns:p="tapestry:parameter"
      >

<t:block id="selectAuthMethod">
	<table class="table">
		<tr>
			<th></th>
			<th></th>
			<th title="The server keeps to secrets, so there is little to loose!">Leak safe</th>
			<th title="Policy prevents long term use">Temporary</th>
			<th title="Requires the involvement of another system">3rd Party</th>
			<th title="Yes, this project is still very much incomplete">Works</th>
			<td></td>
		</tr>
<t:loop source="authMethods" value="authMethod">
		<tr>
			<td>${authMethod.rank}</td>
			<th>${authMethodName}</th>
			<td>${authMethod.leakSafe}</td>
			<td>${authMethod.deadlineRequired}</td>
			<td>${authMethod.thirdParty}</td>
			<td>${actuallyWorks}</td>
			<td>
				<t:pagelink class="btn btn-primary" page="user/credentials/add" context="authMethod">Select</t:pagelink>
			</td>
		</tr>
</t:loop>
	</table>
</t:block>

<t:block id="unimplemented">
	Sorry... don't know how to add a ${authMethodName} yet...
</t:block>

<t:block id="yubiPublic">
	<t:form t:id="yubiPublicForm">
		Using a yubikey is a great way to <u>easily</u> and securely authenticate to websites without any
		additional configuration or memorization (as a username is not required). However, if used by itself
		this authentication method earns a low rank due to the fact that (if lost or stolen) anyone could
		use this key at the push of a button. For in-office or at-home use, this may not be an issue, but
		for increased security we reccomend adding a "what you know" factor, such as a username.
		<br/><br/>
		Please activate the Yubikey that you would like to connect with this account in the field below.
		This is <b>NOT</b> a place to <u>test</u> a yubikey's operation.<br/>
		<t:textField value="yubiInput" autocomplete="off"/>
		<br/>
		<t:submit t:id="doYubiPublic"/>
	</t:form>
</t:block>

<t:block id="staticOtp">
	<t:form t:id="staticOtpForm">
		<b>NOTICE:</b> A static OTP can be a good fallback or account-recovery mechanism, as it earns a much higher
		security rank than general-use passwords due to the fact that they are <b><u>only usable ONCE</u></b>.
		Applications for this method generally include disaster recovery, or granting someone else temporary
		access to an account. As with conventional passwords, a username is required. Unlike passwords (which
		eventually expire), a static one-time-password will (by default) remain effective indefinitely so long
		as it is not used. Also... unlike other OTP mechanisms, this one does not require a special device or
		modile application... therefore, it is somewhat expected that the password will be written down, and
		stowed away securely (such as in a safe or vault).<br/>
		<br/>
		Note that you cannot use a password that has already been used for this account in the past.<br/>
		<br/>
		<b>Comment, note, memo, reminder:</b><br/>
		<t:textfield value="comment"/><br/>
		<b>Ephemeral password:</b><br/>
		<t:passwordField value="password" autocomplete="off"/>
		<br/>
		TODO: add an easy pass-phrase generator, perhaps one that generates a bunch of passwords or phrases, that
		can be activated with a single click.<br/>
		TODO: consider making a 'bulk' passwords page, each with a stern warning that they are only valid once, and
		that they should probably add a new authentication mechanism *DIRECTLY* after logging in with it.<br/>
		<br/>
		<t:submit t:id="doStaticOtp"/>
	</t:form>
</t:block>

<t:block id="rollingPassword">
	<t:form t:id="rollingPasswordForm">
		<b>NOTICE:</b> Rolling passwords are only be available for a short time (dependent on their complexity).
		Therefore, you should not leave a rolling password as your only means of authentication, or you may
		eventually lose access to your account (if you forget to bless a new password, and your old one expires,
		or if something happens that prevents you from logging in for a while). You will not have any helpful
		hint reminders, nor recovery questions. Furthermore, you cannot use a password that you have already used
		for this account in the past.
		<br/>
		<b>Temporary Password:</b><br/>
		<t:passwordField value="password" autocomplete="off"/>
		<br/>
		<t:submit t:id="doRollingPassword"/>
	</t:form>
</t:block>

<t:block id="staticPassword">
	<t:form t:id="staticPasswordForm">
		<b>NOTICE:</b> Static passwords are not generally recommended, but can be very convenient due to their broad
		support with web browsers and password managers. To fit with the accepted security model, you must select a
		deadline, after which you anticipate the password will no longer be needed (and will not be accepted).
		<br/><br/>
		Also, you cannot use a password that you have already used for this account in the past.
		<br/><br/>
		<b>Temporary Password:</b><br/>
		<t:passwordField value="password" autocomplete="off"/>
		<br/>
		<b>Expiration Date:</b><br/>
		<t:dateField value="deadline"/>
		<br/>
		<t:submit t:id="doStaticPassword"/>
	</t:form>
</t:block>

<t:block id="rsaBlock">
	<t:form t:id="rsaForm">
		<b>NOTICE:</b> Although you may technically grant any public key access to your account, they may not
		generally be used to give someone else access to your account, this is because (in the end) a public key
		can only belong to one person/account as it also can also serve to *identitify* (as well as authenticate).
		For this reason, anyone who can prove they own a public key that you enter here may take it away from you.
		<br/><br/>
		<b>RSA Public Key:</b><br/>
		<t:textarea value="pubKey" autocomplete="off"/>
		<br/>
		<t:submit t:id="doRSA"/>
	</t:form>

	<br/><br/>

	If you would like to generate a public/private keypair for yourself, you would generally use a command such as
	the following:
	<pre>
		ssh-keygen -t rsa -b 2048
	</pre>

	...in which case (if all the defaults are kept), the public key would generally be discoverable using this command:
	<pre>
		cat ~/.ssh/id_rsa.pub
	</pre>

</t:block>

	<t:delegate to="authMethodBlock"/>

</html>
