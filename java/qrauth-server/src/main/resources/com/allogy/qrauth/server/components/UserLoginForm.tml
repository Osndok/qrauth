<div id="qrauth"
      xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd"
      xmlns:p="tapestry:parameter">

<link rel="stylesheet" type="text/css" href="${base}${context:user/login/widget.css}"/>

<noscript>

	<!--
	This image allows us to connect the sessions *late* (after the api call that generates this markup),
	and is akin to the "attach_session" api call, except that it works without javascript, because it is
	an image request. Marked as 'unsafe' because GETs should be safe, and this one arguably is NOT.

	If the session *is* now attached, this will return an image with a visual prompt to refresh the page,
	otherwise it will be a 1x1 transparent "nothing" image.
	-->
	<img src="https://services.allogy.com/qrauth/v1/api/noscript/unsafe/attach/$SESSION_ID/notice.png"/>

	<warning>
		<b><u>NOTICE:</u></b> most authentication workflows will have a degraded experience without javascript,
		and a few have yet to be implemented to support "no-javascript". Hereafter, it is presumed that you
		know that you have javascript disabled on your browser, and it might cause some usability issues.
	</warning>

</noscript>

<!-- NB: due to overlapping divs, you cannot safely insert elements at the top of the 'outer' form -->
<form class="outer" method="POST" accept-charset="UTF-8" action="${base}/internal/auth/dispatch" onSubmit="return qrauth_submit_check();">

<div style="display:none">
	<input type="text" name="nut" value="${nut.stringValue}"/>
	<input type="text" name="tenantSession" value="${tenantSession?.session_id}"/>

</div>

<methods class="tabs">
	<prompt>Login method:</prompt>
	<a data-tab="#qrauth_sqrl"     target="_blank" href="noscript/sqrl" class="active">SQRL</a>
	<!-- Part of me thinks this tab should simply be called 'password', but then it would interfer with PPP, conceptually. -->
	<a data-tab="#qrauth_otp"      target="_blank" href="noscript/otp">OTP</a>
	<a data-tab="#qrauth_ppp"      target="_blank" href="noscript/ppp">PPP</a>
	<a data-tab="#qrauth_rsa"      target="_blank" href="noscript/rsa">RSA</a>
	<a data-tab="#qrauth_openid"   target="_blank" href="noscript/openid">OpenID</a>
	<a data-tab="#qrauth_email"    target="_blank" href="noscript/email">Email</a>
	<a data-tab="#qrauth_overview" target="_blank" href="noscript/overview">Overview</a>
	<a data-tab="#qrauth_options"  target="_blank" href="noscript/options">Options</a>
</methods>

<div class="tabs-content">

<arena id="qrauth_options">
	<!--
	NB: we can't have any truly impactful options here, as these options are inherently sensitive to cross-site posting attacks
	-->
	Options panel goes here...
	<ul>
		<li>login straight to account maintenance</li>
		<li>set desired session length</li>
		<li>create an account, if one does not exist</li>
	</ul>
</arena>

<arena id="qrauth_sqrl" class="active">
	<left>
		<a href="${doSqrl.url}" onClick="window.setTimeout( qrauth_sqrlClick, 1 );">
			<img src="${base}/api/sqrl/qr/${nut.stringValue}/sqrl.png"/>
		</a>
		<br/>
		<hostname>${doSqrl.domain}</hostname>
		<noscript>
			<br/>
			<input type="submit" name="do_sqrl" value="Authentication Sent"/>
		</noscript>
	</left>
	<right>
		<b>SQRL</b> is a new authentication mechanism that does not require the server to
		keep any secret information (like passwords). It is secure, quick, and reliable, but
		<u>does require a special client program</u> in order for it to work.
		<br/><br/>
		When using an untrusted computer, SQRL can be used directly from your mobile device
		(by scanning the qr code) to minimize the risk of an account takeover, or directly
		from your personal workstation (by clicking on the qr code).
		<br/><br/>
	</right>
	<lower>
		It is not necessary to create a new identity per-website, as the SQRL protocol
		automatically isolates your online identities per-domain.
		See <a href="https://www.grc.com/sqrl/sqrl.htm">the main sqrl page at grc.com</a>
		for more information.
		<br/><br/>
		If allowed by the server, one can also <b>create</b> or <b>register</b> a new account
		by logging in using one of these methods: ${registrationMethods}
	</lower>
</arena>


<arena id="qrauth_otp">
	<table>
		<tr>
			<th>Prompt</th>
			<th>Response</th>
			<th>Action</th>
		</tr>
		<tr>
			<td><label for="username">Username:</label></td>
			<td><input name="otp_username"/></td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Password:<img src="${base}${context:images/yubikey.ico}" title="Yubikeys are welcome in this field (with or without a username) for both registration and authentication."/></td>
			<!--
			NOTICE: The password field is not marked as a password, and therefore will be exposed when typing.
			 OTPs *should* be one-time, so it's okay to expose them.
			 IN FACT, it is partly better so that the browser will not try/offer to remember the password.
			 HOWEVER... this field *is* used for (the discouraged) static passwords,
			 BUT... maybe that will make the decerning user uncomfortable enough to to use a better auth method,
			 OR.... it might aid in a lock-out situation (where the OTPs is provided over the phone, etc)
			 ANYWAY... there should be no security theatre concerning the fact that the password is not really 'hidden'.
			-->
			<td><input name="otp_password" autocomplete="off"/></td>
			<td><input type="submit" name="do_otp" value="Submit"/></td>
		</tr>
	</table>
	<br/>
	A <b>one-time password (OTP)</b> is distinct from a conventional password in that it is
	usually not remembered or written down, but is instead generated by a device or mobile
	app at the press of a button.
	<br/><br/>
	This one entry field can accept OTPs from any device in good standing with your account,
	as well as any password provided to you via email or over the phone.
	<br/><br/>
	For the system that uses one-time passwords on a <b><u>printed card</u></b>, please use
	the "PPP" (Perfect Paper Passwords) tab to receive the coordinates of your next passcode.
	<br/><br/>
	For legacy systems that rely on a static username and password, that can be entered here
	for migration, but are not recommended for long-term use.
</arena>


<arena id="qrauth_ppp">
	<table>
		<tr>
			<th colspan="2">Step</th>
			<th class="field">Response</th>
			<th class="action">Action</th>
		</tr>
		<tr>
			<td class="num">1</td>
			<td class="instr"><label for="ppp_username">Provide username:</label></td>
			<td class="field">
				<input name="ppp_username" id="ppp_username"
					url="${base}/api/ppp/challenge"
					onKeypress="return qrauth_ppp_keyup(event);"
					/>
			</td>
			<td class="action">
				<input type="submit" name="do_ppp_1" value="Request Challenge"
					onClick="return qrauth_ppp_challenge();"
					/>
			</td>
		</tr>
		<tr>
			<td class="num">2</td>
			<td class="instr">Receive challenge:</td>
			<td class="field" id="ppp_challenge"></td>
			<td class="action">Locate Password</td>
		</tr>
		<tr>
			<td class="num">3</td>
			<td class="instr">Provide response:</td>
			<td class="field"><input name="ppp_response" id="ppp_response"/></td>
			<td class="action"><input type="submit" name="do_ppp_2" value="Submit"/></td>
		</tr>
	</table>
	<img src="${base}${context:user/login/blackspy.png}"/>
	<b>Perfect Paper Passwords (PPP)</b> are a "something you have" authentication mechanism where you can
	provide a <b><u>very short</u></b> password from a pre-established set of response cards (which are
	about the size of a credit card and require no batteries). Knowing that each password can only be used
	once... <b>ever</b>... you can also (to some degree) verify that you are logging into the correct server
	by striking through previously used passwords. Once logged in, you can retire entire sheets en-masse
	if they are observed or fall out of your control. For more information, please see
	<a href="https://www.grc.com/ppp.htm">the PPP page on grc.com</a>.
</arena>

<arena id="qrauth_rsa">
	<label for="username">Username (or RSA public key):</label>
	<br/>
	<textarea name="rsa_pubkey"></textarea>
	<br/>
	<!--
	TODO: is the convenience of a copy-to-clipboard widget worth the security risk presented by training users to directly
	execute commands they only *think* that they have seen (as the webpage could copy anything), thus potentially giving a
	malacious website full control of their user account and exposure of secrets such as the matching private key.

	It is unclear where the true responsibility lays, should terminal emulators confirm pasted content? Browsers only
	copy visible text? or sites not provide commands via copy/paste utilities?

	Since it is not a clear threat unto itself (a MITM can get wreck havoc with your session anyway), we will let it
	be the user's choice, and our responsibility will be to do whatever we can to make sure it is an informed choice,
	rather than authoritatively prescribing that no-one have this option.

	Perhaps we can (at a very small random chance) instead copy a benign warning message, to keep them on their
	toes?
	-->
	<div data-clipboard-target="qrauth_rsa_command" id="qrauth_clipboard1" title="BEWARE!">Copy to Clipboard</div>
	Challenge:<br/>
	<!-- NB: pkeyutl is not available on even very new OSX versions, so we use rsautl -->
	<!-- NB: it is important that there be no 'newline' characters between the pre tags, or ZeroClipboard will pick them up and the command may execute once pasted -->
	<pre id="qrauth_rsa_command">echo -n ${nut.stringValue} | openssl rsautl -sign -inkey ~/.ssh/id_rsa | base64</pre>
	<label for="response">Response:</label>
	<br/>
	<textarea name="rsa_response"></textarea>
	<br/>
	<input type="submit" name="do_rsa" value="Submit"/>
</arena>

<arena id="qrauth_openid">
	OpenID goes here...
</arena>

<arena id="qrauth_email">
	Email goes here...
</arena>

<arena id="qrauth_overview">
	<t:authMethodOverview/>
</arena>

</div>

</form>

<script src="${base}${context:lib/tabby/classList.js}"></script>
<script src="${base}${context:lib/tabby/tabby.js}"></script>
<script src="${base}${context:lib/zeroclipboard-2.2.0/ZeroClipboard.min.js}"></script>
<script src="${base}${context:user/login/widget.js}"></script>

</div>
